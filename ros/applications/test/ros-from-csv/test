#!/bin/bash

name=$( basename "$0" )

source $( which comma-application-util ) || { echo "$name: cannot source 'comma-application-util'" >&2; exit 1; }
source $( which comma-name-value-util ) || { echo "$name: cannot source 'comma-name-value-util'" >&2; exit 1; }

comma_path_value_to_var --prefix=input --export

[[ -r "$input_csv" ]] || { echo "$name: cannot read input csv file '$input_csv'" >&2; exit 1; }

function format_output()
{
    python -c "
import sys, yaml

def pretty_print( di, prefix ):
    for k, v in di.iteritems():
        if type(v) == dict:
            pretty_print( v, prefix + k + '/' )
        elif type(v) == str:
            print '%s=\"%s\"' % ( prefix + k, v )
        else:
            try:
                _ = iter( v )
            except TypeError:
                # not iterable
                print '%s=%s' % ( prefix + k, str(v) )
            else:
                # iterable
                # numpy.array by default does not comma-separate array elements (as opposed to list); yaml wants commas
                # thus, all arrays end up of length 1 and contain a single string
                if len(v) == 1 and type(v[0]) == str:
                    v = v[0].split()
                n = 0
                for e in v:
                    print '%s[%d]=%s' % ( prefix + k, n, str(e) )
                    n = n + 1

lines = yaml.load_all( sys.stdin, Loader=yaml.SafeLoader ) # this is a generator, not actual load to memory
n = 0
for l in lines:
    if l:
        pretty_print( l, 'output[%d]/' % n )
        n = n + 1
"
}

input_converter=${input_converter:-"cat"}
[[ -n "$input_line_count" ]] && input_head="head -n $input_line_count" || "cat"

cat "$input_csv" \
    | $input_head \
    | $input_converter \
    | ros-from-csv "$input_topic" --type "$input_type" $input_args --dry \
    | sed '/^position_covariance_type:/a---' \
    | format_output \
    | sort

fields=$( cat "$input_csv" | ros-from-csv "$input_topic" --type "$input_type" $input_args --output-fields )
output_fields=$( echo "$fields" | csv-fields rename --fields "header/stamp" --to "time/seconds" )
cat "$input_csv" \
    | $input_head \
    | csv-time --fields=,t, --to seconds \
    | name-value-from-csv "$output_fields" --output-line-number \
    | sed 's/^/line/' \
    | csv-quote --delimiter = --fields ,x
