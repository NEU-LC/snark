#!/bin/bash

readonly scriptname=$( basename $0 )

source $( type -p comma-name-value-util ) || { echo "$scriptname: cannot source 'comma-name-value-util'" >&2; exit 1; }

function random_cloud
{
    # Unless seeded with srand(), rand() will always give the same sequence
    gawk -v num_points=$1 -v l=$2 -v w=$3 -v h=$4 '
    function r(min,max) { return rand()*(max-min)+min; }
    BEGIN {
        for( i = 0; i < num_points; i++)
            printf( "%f,%f,%f\n", i / num_points * l, r( -w, w ), r( -h, h ));
    }'
}

function pair_fields
{
    echo $( echo $1 | csv-fields prefix --path "first" ),$( echo $1 | csv-fields prefix --path "second" )
}

function max_diff
{
    local block
    local csv_calc_format="d"
    if [[ $fields =~ "block" ]]; then
        block=",block"
        csv_calc_format="$csv_calc_format,ui"
    fi

    paste -d, $1 $2 \
        | csv-shuffle --fields $pasted_input_fields --output $pasted_output_fields \
        | points-calc subtract --fields $( points-calc subtract --input-fields )${block} \
        | csv-shuffle --fields $( points-calc subtract --input-fields)${block},$( points-calc subtract --output-fields ) \
                      --output $( points-calc subtract --output-fields )${block} \
        | points-calc norm --fields $( points-calc norm --input-fields )${block} \
        | csv-shuffle --fields $( points-calc norm --input-fields)${block},$( points-calc norm --output-fields ) \
                      --output $( points-calc norm --output-fields )${block} \
        | csv-calc max --format $csv_calc_format --fields x${block} \
        | csv-shuffle --fields $( csv-calc max --fields x${block} --output-fields ) --output x/max
}

function perturb
{
    local perturbation=$1

    gawk -v p=$perturbation '
        function r(min,max) { return rand()*(max-min)+min; }
        function perturb(x,p) { f = r(1-p,1+p); return x*f; }
        BEGIN { FS=","; OFS=","; OFMT="%.12f"; }
        { for( i=1; i<=NF; i++ ) $i = perturb( $i, p ); print }
        '
}

[[ $1 == "--view" ]] && { options_view=1; shift; }

output_dir=output
[[ -d $output_dir ]] || mkdir $output_dir
cd $output_dir

# read test input and assign to variables
comma_path_value_to_var --prefix=input

fields=${input_fields:-x,y,z}
scale=${input_scale:-1}

if [[ $input_reference =~ "random" ]]; then
    num_points=${input_reference#random }
    random_cloud $num_points 100 10 10 > reference.csv
else
    echo -e $input_reference > reference.csv
fi

# Treat displacement and rotation as vectors to convert from degrees to radians
scalar=$( echo "3.14159265359 / 180" | bc -l )
frame_format=u/x,u/y,u/z,v/x,v/y,v/z
frame=$( echo $input_frame,$scalar | points-calc scale --fields=$frame_format,scalar \
             | csv-shuffle --fields=$frame_format,scalar,x,y,z \
                           --output=u/x,u/y,u/z,x,y,z )

# Generate the source frame, which we'll try to align with the reference,
# and optionally perturb it a little
perturbation_fn=cat
[[ $input_perturbation ]] && perturbation_fn="perturb $input_perturbation"

points_calc_scale_fields=$( csv-fields rename --fields x,y,z --to v/x,v/y,v/z <<< $fields )

cat reference.csv \
    | points-frame --to $frame --fields=$fields \
    | points-calc scale --scalar $scale --invert --fields=$points_calc_scale_fields \
    | csv-shuffle --fields=$( csv-fields rename --fields x,y,z --to orig/x,orig/y,orig/z <<< $fields),x,y,z --output-fields=$fields \
    | $perturbation_fn \
    > source.csv

pasted_input_fields=$( pair_fields $fields )
pasted_output_fields=$( echo $pasted_input_fields | csv-fields cut --fields first/block )

paste -d, reference.csv source.csv \
    | csv-shuffle --fields=$pasted_input_fields --output=$pasted_output_fields \
    > combined.csv

combined_fields=$( echo $pasted_output_fields | csv-fields rename --fields second/block --to block )

binary_input_transform=cat
binary_option=
if [[ $input_mode == "binary" ]]; then
    binary_input_transform="csv-to-bin 6d"
    binary_option="--binary=6d"
fi

transform_with_error=$( cat combined.csv | $binary_input_transform \
    | points-align --verbose $input_args $binary_option --fields=$combined_fields --output-error \
    | sed 's/-nan/nan/g' )
echo "exit_code=$?"
echo "transform_with_error=$transform_with_error" >&2

output_fields=$( points-align --output-fields --output-error --fields=$combined_fields )

transform=$( echo $transform_with_error | csv-shuffle --fields $output_fields --output "x,y,z,roll,pitch,yaw" )
scale=$( echo $transform_with_error | csv-shuffle --fields $output_fields --output "scale" )

cat source.csv \
    | points-calc scale --scalar $scale --fields=$points_calc_scale_fields \
    | csv-shuffle --fields=$( csv-fields rename --fields x,y,z --to orig/x,orig/y,orig/z <<< $fields),x,y,z --output-fields=$fields \
    | points-frame --from $transform --fields=$fields \
    > recreated.csv

echo "output=$transform_with_error" >&2
echo -e "$transform_with_error" \
    | name-value-from-csv $( points-align --output-fields --output-error --fields=$combined_fields ) --prefix transform --line-number\
    | csv-quote --delimiter='=' --fields=,value

max_diff reference.csv recreated.csv \
    | name-value-from-csv value --prefix max_error --line-number \
    | csv-quote --delimiter='=' --fields=,value

(( options_view )) && view-points "reference.csv;colour=red" "source.csv;colour=yellow" "recreated.csv;colour=green"
exit 0
