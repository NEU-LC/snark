set( dir ${SOURCE_CODE_BASE_DIR}/point_cloud/applications )
file( GLOB source   ${dir}/*.cpp)
file( GLOB includes ${dir}/*.h)
file( GLOB points_calc_source ${dir}/points-calc/*.cpp)
file( GLOB points_calc_includes ${dir}/points-calc/*.h)
file( GLOB points_grep_source ${dir}/points-grep/*.cpp)
file( GLOB points_grep_includes ${dir}/points-grep/*.h)
SOURCE_GROUP( ${TARGET_NAME} FILES ${source} ${includes} ${points_calc_source} ${points_calc_includes} ${points_grep_includes} ${points_grep_source} )

ADD_EXECUTABLE( points-align points-align.cpp )
ADD_EXECUTABLE( points-calc points-calc.cpp ${points_calc_source} )
ADD_EXECUTABLE( points-detect-change points-detect-change.cpp )
ADD_EXECUTABLE( points-foreground-partitions points-foreground-partitions.cpp )
ADD_EXECUTABLE( points-rays points-rays.cpp )
ADD_EXECUTABLE( points-to-centroids points-to-centroids.cpp )
ADD_EXECUTABLE( points-to-partitions points-to-partitions.cpp )
ADD_EXECUTABLE( points-to-voxels points-to-voxels.cpp )
ADD_EXECUTABLE( points-to-voxel-indices points-to-voxel-indices.cpp )
ADD_EXECUTABLE( points-track-partitions points-track-partitions.cpp )

TARGET_LINK_LIBRARIES( points-align snark_math ${comma_ALL_LIBRARIES} ${snark_ALL_EXTERNAL_LIBRARIES} )
TARGET_LINK_LIBRARIES( points-calc snark_point_cloud snark_math snark_math_geometry ${comma_ALL_LIBRARIES} ${snark_ALL_EXTERNAL_LIBRARIES} )
TARGET_LINK_LIBRARIES( points-detect-change snark_math ${comma_ALL_LIBRARIES} ) #profiler )
TARGET_LINK_LIBRARIES( points-foreground-partitions snark_point_cloud ${comma_ALL_LIBRARIES} tbb )
TARGET_LINK_LIBRARIES( points-rays snark_math snark_math_spherical_geometry ${comma_ALL_LIBRARIES} tbb ) #profiler )
TARGET_LINK_LIBRARIES( points-to-centroids snark_point_cloud ${comma_ALL_LIBRARIES} tbb )
TARGET_LINK_LIBRARIES( points-to-partitions snark_point_cloud ${comma_ALL_LIBRARIES} tbb )
TARGET_LINK_LIBRARIES( points-to-voxels snark_point_cloud ${comma_ALL_LIBRARIES} ${snark_ALL_EXTERNAL_LIBRARIES} )
TARGET_LINK_LIBRARIES( points-to-voxel-indices snark_point_cloud ${comma_ALL_LIBRARIES} ${snark_ALL_EXTERNAL_LIBRARIES} )
TARGET_LINK_LIBRARIES( points-track-partitions ${comma_ALL_LIBRARIES} )

set_target_properties( points-align PROPERTIES LINK_FLAGS_RELEASE -s )
set_target_properties( points-calc PROPERTIES LINK_FLAGS_RELEASE -s )
set_target_properties( points-detect-change PROPERTIES LINK_FLAGS_RELEASE -s )
set_target_properties( points-foreground-partitions PROPERTIES LINK_FLAGS_RELEASE -s )
set_target_properties( points-rays PROPERTIES LINK_FLAGS_RELEASE -s )
set_target_properties( points-to-centroids PROPERTIES LINK_FLAGS_RELEASE -s )
set_target_properties( points-to-partitions PROPERTIES LINK_FLAGS_RELEASE -s )
set_target_properties( points-to-voxels PROPERTIES LINK_FLAGS_RELEASE -s )
set_target_properties( points-to-voxel-indices PROPERTIES LINK_FLAGS_RELEASE -s )
set_target_properties( points-track-partitions PROPERTIES LINK_FLAGS_RELEASE -s )

IF( PROFILE )
    TARGET_LINK_LIBRARIES ( points-to-partitions profiler )
ENDIF( PROFILE )

INSTALL( TARGETS points-align
                 points-calc
                 points-detect-change
                 points-to-partitions
                 points-foreground-partitions
                 points-rays
                 points-to-centroids
                 points-track-partitions
                 points-to-voxels
                 points-to-voxel-indices
         RUNTIME DESTINATION ${snark_INSTALL_BIN_DIR}
         COMPONENT Runtime )

INSTALL( PROGRAMS examples/points-eigen points-to-image DESTINATION ${snark_INSTALL_BIN_DIR} )

add_executable( points-mesh points-mesh.cpp )
target_link_libraries( points-mesh ${comma_ALL_LIBRARIES} ${snark_ALL_EXTERNAL_LIBRARIES} )
set_target_properties( points-mesh PROPERTIES LINK_FLAGS_RELEASE -s )
install( TARGETS points-mesh RUNTIME DESTINATION ${snark_INSTALL_BIN_DIR} COMPONENT Runtime )

if( USE_CUDA )
    cuda_add_executable( points-join points-join.cpp points-join/points_join_cuda.cu ) # quick and dirty, simplistic for now
else( USE_CUDA )
    add_executable( points-join points-join.cpp )
endif( USE_CUDA )

target_link_libraries( points-join snark_math snark_math_geometry snark_point_cloud ${comma_ALL_LIBRARIES} ${snark_ALL_EXTERNAL_LIBRARIES} tbb )
set_target_properties( points-join PROPERTIES LINK_FLAGS_RELEASE -s )
install( TARGETS points-join RUNTIME DESTINATION ${snark_INSTALL_BIN_DIR} COMPONENT Runtime )

if( NOT WIN32 )
    add_executable( points-grep points-grep.cpp ${points_grep_includes} ${points_grep_source} )
    target_link_libraries( points-grep snark_math_geometry snark_math ${comma_ALL_LIBRARIES} ${Boost_FILESYSTEM_LIBRARY} )
    set_target_properties( points-grep PROPERTIES LINK_FLAGS_RELEASE -s )
    install( TARGETS points-grep RUNTIME DESTINATION ${snark_INSTALL_BIN_DIR} COMPONENT Runtime )
endif( NOT WIN32 )

ADD_SUBDIRECTORY( points-calc )
