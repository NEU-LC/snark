#!/bin/bash

scriptname=$( basename "$0" )

source $( which comma-application-util ) || { echo "$scriptname: cannot source 'comma-application-util'" >&2; exit 1 ; }

output_dir="output"
mkdir -p "$output_dir" || { echo "$scriptname: cannot create directory '$output_dir'" >&2; exit 1 ; }

function generate()
{
    local nx=$1
    local ny=$2
    local t=$3
    local cols="$4"
    python -c "
from __future__ import print_function
import math

def generate( nx, ny, t, cols ):
    dy = 1. / float(ny)
    if cols == 'columns':
        for ix in range( nx ):
            for ic in range( 3 ):
                jx = ix * 3 + ic
                for iy in range( ny ):
                    vgrey = iy * dy + 10 * ic
                    print( '{},{},{},{}'.format( t, jx, iy, int(255*vgrey) ) ) # print '%s,%d,%d,%d' % ( t, jx, iy, int(255*vgrey) )
    elif cols == 'rows':
        for ix in range( nx ):
            for iy in range( ny ):
                for ic in range( 3 ):
                    jy = iy * 3 + ic
                    vgrey = iy * dy + 10 * ic
                    print( '{},{},{},{}'.format( t, ix, jy, int(255*vgrey) ) ) # print '%s,%d,%d,%d' % ( t, ix, jy, int(255*vgrey) )
    else:
        for ix in range( nx ):
            for iy in range( ny ):
                vr = iy * dy
                vg = iy * dy + 10
                vb = iy * dy + 20
                print( '{},{},{},{},{},{}'.format( t, ix, iy, int(255*vr), int(255*vg), int(255*vb) ) ) #print( '%s,%d,%d,%d,%d,%d' % ( t, ix, iy, int(255*vr), int(255*vg), int(255*vb) ) )

if __name__ == '__main__':
    generate($nx, $ny, '$t', '$cols')
"
}
export -f generate
declare -r generate

function extract_column_channel()
{
    gawk -F, --assign channel=$1 'BEGIN{ OFS=","; }{ if ( ( NR - 1 - channel ) % 3 == 0 ) { print $1,($2 - channel)/3,$3,$4; } }'
}
export -f extract_column_channel
declare -r extract_column_channel

function extract_row_channel()
{
    gawk -F, --assign channel=$1 --assign ncols=$2 'BEGIN{ OFS=","; }{ ic = int( ( NR - 1 ) / ncols ); nc = ic % 3; if ( nc == channel ) { print $1,$2,($3 - channel)/3,$4; } }'
}
export -f extract_row_channel
declare -r extract_row_channel

function csv_to_path_value()
{
    local image=$1
    local what=$2
    cat "$image" \
        | csv-shuffle --fields="time,x,y,r,g,b" --output-fields="x,y,r,g,b" \
        | name-value-from-csv "x,y,channel[0],channel[1],channel[2]" --indices=x,y \
        | sed "s@^@$what/@" \
        | sed 's@"@@g'
    comma_status_ok
}
export -f csv_to_path_value
declare -r csv_to_path_value

nx=64
ny=48
timestamp="20161206T160000.000000"
echo "nx=$nx"
echo "ny=$ny"
echo "timestamp=\"$timestamp\""

for cols in "" "columns" "rows" ; do
    if [[ "$cols" == "columns" ]] ; then
        odir="$output_dir/columns"
        kx=$(( nx * 3 ))
        ky=$ny
        cmd="cols-to-channels=0,1,2,repeat:3,pad:12;"
        fields="t,x,y,grey"
        otype="ub"
    fi
    if [[ "$cols" == "rows" ]] ; then
        odir="$output_dir/rows"
        kx=$nx
        ky=$(( ny * 3 ))
        cmd="rows-to-channels=0,1,2,repeat:3,pad:12;"
        fields="t,x,y,grey"
        otype="ub"
    fi
    if [[ -z "$cols" ]] ; then
        odir="$output_dir/direct"
        kx=$nx
        ky=$ny
        cmd=""
        fields="t,x,y,b,g,r"
        otype="3ub"
    fi
    mkdir -p "$odir" || { echo "$scriptname: cannot create directory '$odir'" >&2; exit 1 ; }

    image_png="$odir/image.png"
    image_csv="$odir/image.csv"
    cols_to_channels_png="$odir/cols-to-channels.png"
    rows_to_channels_png="$odir/rows-to-channels.png"
    cols_to_channels_csv="$odir/cols-to-channels.csv"
    rows_to_channels_csv="$odir/rows-to-channels.csv"

    generate $nx $ny $timestamp $cols \
        | image-from-csv --fields=$fields --output="rows=$ky;cols=$kx;type=$otype" \
        | cv-cat --output no-header "encode=png" > "$image_png"
    comma_status_ok || { echo "$scriptname: pipeline to create '$image_png' failed" >&2; exit 1 ; }

    cv-cat --file "$image_png" \
        | image-to-csv > "$image_csv"
    comma_status_ok || { echo "$scriptname: pipeline to create '$image_csv' failed" >&2; exit 1 ; }

    if [[ -n "$cmd" ]] ; then
        generate $nx $ny $timestamp $cols \
            | image-from-csv --fields=$fields --output="rows=$ky;cols=$kx;type=$otype" \
            | ( cd "$odir"; cv-cat "${cmd}file=png;null" )
        comma_status_ok || { echo "$scriptname: pipeline to create '$odir/$timestamp.png' failed" >&2; exit 1 ; }
        [[ -f "$odir/$timestamp.png" ]] || { echo "$scriptname: file '$odir/$timestamp.png' not found" >&2; exit 1; }

        cv-cat --file "$odir/$timestamp.png" \
            | image-to-csv > "$odir/$timestamp.csv"
        comma_status_ok || { echo "$scriptname: pipeline to create '$odir/$timestamp.csv' failed" >&2; exit 1 ; }
        [[ -f "$odir/$timestamp.csv" ]] || { echo "$scriptname: file '$odir/$timestamp.csv' not found" >&2; exit 1; }

        csv_to_path_value "$odir/$timestamp.csv" "from/$cols" || { echo "$scriptname: conversion of '$odir/$timestamp.csv' to path-value failed" >&2; exit 1 ; }
    else
        csv_to_path_value "$image_csv" "direct" || { echo "$scriptname: conversion of '$image_csv' to path-value failed" >&2; exit 1 ; }
    fi

done
