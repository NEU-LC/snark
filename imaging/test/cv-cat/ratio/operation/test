#!/bin/bash

scriptname=$( basename "$0" )

source $( which comma-application-util ) || { echo "$scriptname: cannot source 'comma-application-util'" >&2; exit 1 ; }
comma_path_value_to_var --prefix=input

formulae=()
i=0
while true ; do
    vname="input_formulae_$i"
    eval input_formulae=\$$vname
    [[ -n "$input_formulae" ]] || break
    formulae+=( "$input_formulae" )
    (( ++i ))
done

function output() {
    local m=0
    local default_formulae=( "r" "g" "b" "a" )
    local v
    while true ; do
        read v
        if [[ -z "$v" ]] ; then break; fi
        if [[ "$v" == "@" ]]; then v="${default_formulae[$m]}" ; fi
        echo "formula[$n]/expr[$m]=\"$v\"";
        ((++m));
    done
}

for n in ${!formulae[@]} ; do
    echo "${formulae[$n]}" | sed 's/^,/@,/;s/,,/,@,/g;s/,$/,@/' | tr ',' '\n' | output
done

output_dir="output"
mkdir -p "$output_dir" || { echo "$scriptname: cannot create directory '$output_dir'" >&2; exit 1 ; }

function generate()
{
    local nx=$1
    local ny=$2
    local t=$3
    python -c "
from __future__ import print_function
import math

def generate( nx, ny, t, r, g, b ):
    dy = 1. / float(ny)
    for ix in range( nx ):
        for iy in range( ny ):
            print( '{},{},{},{},{},{}'.format( t, ix, iy, r, g, b ) )

if __name__ == '__main__':
    generate($nx, $ny, '$t', $red, $green, $blue)
"
}
export -f generate
declare -r generate

function csv_to_path_value()
{
    local image=$1
    local what=$2
    # quick and dirty, just to fix the bloody test
    cat "$image" \
        | csv-shuffle --fields="time,x,y,r,g,b" --output-fields="x,y,r,g,b" \
        | name-value-from-csv "x,y,channel[0],channel[1],channel[2]" --indices=x,y \
        | sed "s@^@$what/@" \
        | sed 's@"@@g'
    comma_status_ok
}
export -f csv_to_path_value
declare -r csv_to_path_value

nx=16
ny=12
timestamp="20161206T160000.000000"
echo "nx=$nx"
echo "ny=$ny"
echo "timestamp=\"$timestamp\""

image_png="$output_dir/image.png"
image_csv="$output_dir/image.csv"

export red=100
export green=75
export blue=50
declare -r red green blue
echo "red=$red"
echo "green=$green"
echo "blue=$blue"

fields="t,x,y,b,g,r"

generate $nx $ny $timestamp \
    | image-from-csv --fields=$fields --output="rows=$ny;cols=$nx;type=3ub" \
    | cv-cat --output no-header "encode=png" > "$image_png"
comma_status_ok || { echo "$scriptname: pipeline to create '$image_png' failed" >&2; exit 1 ; }

cv-cat --file "$image_png" | image-to-csv > "$image_csv"
comma_status_ok || { echo "$scriptname: pipeline to create '$image_csv' failed" >&2; exit 1 ; }

otypes=( "3ub" "3i" "3f" "3d" )
for otype in "${otypes[@]}" ; do
    for k in "${!formulae[@]}" ; do
        formula=${formulae[$k]}
        odir="$output_dir/$otype/$k"
        mkdir -p "$odir" || { echo "$scriptname: cannot create directory '$odir'" >&2; exit 1 ; }
        generate $nx $ny $timestamp \
            | image-from-csv --fields=$fields --output="rows=$ny;cols=$nx;type=3ub" \
            | ( cd "$odir"; cv-cat "convert-to=$otype;ratio=${formula};convert-to=3ub;file=png;null" )
        comma_status_ok || { echo "$scriptname: pipeline to create '$odir/$timestamp.png' failed" >&2; exit 1 ; }
        [[ -f "$odir/$timestamp.png" ]] || { echo "$scriptname: file '$odir/$timestamp.png' not found" >&2; exit 1; }
        cv-cat --file "$odir/$timestamp.png" | image-to-csv > "$odir/$timestamp.csv"        
        comma_status_ok || { echo "$scriptname: pipeline to create '$odir/$timestamp.csv' failed" >&2; exit 1 ; }
        [[ -f "$odir/$timestamp.csv" ]] || { echo "$scriptname: file '$odir/$timestamp.csv' not found" >&2; exit 1; }
        # todo: competely rewrite in a linear explicit way; for now quick and dirty, just to fix the bloody test
        if (( $( head -n1 $odir/$timestamp.csv | csv-fields numbers --size ) == 4 )); then cat $odir/$timestamp.csv | csv-shuffle --fields t,x,y,r --output-fields t,x,y,r,r,r | sponge $odir/$timestamp.csv; fi
        opath=$( printf "formula[%d]" $k )
        csv_to_path_value "$odir/$timestamp.csv" "$opath" || { echo "$scriptname: conversion of '$odir/$timestamp.csv' to path-value failed" >&2; exit 1 ; }
    done
done
