#!/usr/bin/expect

proc usage {scriptname} {
    puts ""
    puts "Emulate aspects of an Echodyne radar"
    puts ""
    puts "Usage: $scriptname <operation> \[<options>]"
    puts ""
    puts "    where <operation> is one of:"
    puts "        commands (only operation currently supported)"
    puts ""
    puts "Options:"
    puts "    --port <num>; listens on <port> (default: 23) for Echodyne radar commands"
    puts ""
    puts "commands operation supports the following:"
    puts "    GETSERIAL"
    puts "    SYS:TIME?"
    puts "    SYS:TIME <days>,<milliseconds>"
    puts ""
    puts "See section 8 of the Echodyne User Manual for details"
    puts ""
    puts "Motivation"
    puts "    Applications that use the Echodyne API to read streaming data"
    puts "    (e.g. echodyne-cat) will first send some commands and expect responses."
    puts "    This example application allows those commands to run when real hardware"
    puts "    is not available. For example, for testing or simulation."
    puts ""
    puts "Example"
    puts "    In two separate terminals:"
    puts "    $ $scriptname commands --port 2023"
    puts "    $ echodyne-cat <channel> --address 127.0.0.1 --port 2023"
    puts ""
    puts "    will set-up echodyne-cat to read from the raw radar data port for <channel>"
    puts ""
}

set scriptname [file tail $argv0]
set operation [lindex $argv 0]

if {[string equal $operation "-h"] || [string equal $operation "--help"]} {
    usage $scriptname
    return 0
}

set port 23;                    # default

set arglen [llength $argv]
set index 1;                    # we've already picked up the operation arg
while {$index < $arglen} {
    set arg [lindex $argv $index]
    switch -exact $arg {
        --port { set port [lindex $argv [incr index]] }
        default { puts "$scriptname: unknown option $arg"; return 1 }
    }
    incr index
}

# never timeout
set timeout -1

# The radar listens for commands on tcp port 23
# netcat options are: listen, keep listening, send CRLF
spawn -noecho nc -lkC localhost $port

# boot time is considered to be when this application starts
global time_at_boot
set time_at_boot [clock milliseconds]

global time_offset
set time_offset 0

# Format time in elapsed seconds as echodyne sys:time
# See User Manual section 8.9
proc sys_time {milliseconds} {
    set days [expr {int( $milliseconds / 86400000 )}]
    set ms [expr {$milliseconds - $days * 86400000}]
    return [list $days $ms]
}

proc time_since_boot {} {
    global time_at_boot
    return [expr {[clock milliseconds] - $time_at_boot}]
}

proc set_time_offset {days milliseconds} {
    global time_offset
    set time_offset [expr {$days * 86400000 + $milliseconds}]
}

proc get_time {} {
    global time_offset
    return [join [sys_time [expr {[time_since_boot] + $time_offset}] ] ","]
}

# Handle a subset of commands as defined in section 8 of the user manual
expect {
    GETSERIAL {
        send -- "123456\rOK\r"
        exp_continue
    }
    -ex "SYS:TIME?" {
        send -- "[ get_time ]\rOK\r"
        exp_continue
    }
    -indices -re {SYS:TIME ([0-9]+),([0-9]+)} {
        set_time_offset $expect_out(1,string) $expect_out(2,string)
        send -- "OK\r"
        exp_continue
    }
}
