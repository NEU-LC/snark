# Convert input files to raw data
#
# Note that unlike the real device, this test code generates sparse data.
# In particular, it will include all 64 channels in each block, but will skip azimuth blocks.
# It also makes no attempt to output 12608 byte packets.

measurement_id=0

function encode_header()
{
    local measurement_id=$1
    csv-paste "value=$(( measurement_id * 1000 )),$measurement_id" - | csv-to-bin ul,uw,uw,ui
}

function encode()
{
    local channel=$1
    local range=$2
    local signal=$3
    local reflectivity=$4
    local ambient=$5
    if (( channel == 0 )); then
        echo $frame_id,$curr_encoder_count | encode_header $measurement_id
        (( measurement_id++ ))
    fi
    echo $range,$signal,$reflectivity,$ambient | csv-to-bin ui,uw,uw,ui
    (( channel == 63 )) && echo -1 | csv-to-bin i
}

function raw_packets()
{
    local curr_channel=0
    local curr_encoder_count=0
    local done=0
    while (( !done )); do
        IFS=, read -r frame_id encoder_count channel range signal reflectivity ambient
        done=$?
        while (( channel != curr_channel || encoder_count != curr_encoder_count )); do
            encode $curr_channel 0 0 0 0
            if (( ++curr_channel == 64 )); then
                (( done )) && return
                curr_channel=0
                curr_encoder_count=$encoder_count # jump to the next encoder count from input
            fi
        done
        encode $curr_channel $range $signal $reflectivity $ambient
        (( ++curr_channel == 64 )) && { curr_channel=0; (( curr_encoder_count+=44 )); }
    done
}

function input_to_raw()
{
    grep '^[0-9]' | raw_packets
}
